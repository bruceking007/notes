利用zabbix低级别自动发现功能（LLD），编写数据采集脚本，改造zabbix自带的模板，通过Discovery自动发现jmx端口，并自动增加监控。

【工具套件】：
cmdline-jmxclient-0.10.3.jar：基础工具，主要是用这东东来采集数据；
Qiueer-Template JMX Generic.xml： JVM监控模板，主要监控JVM，监控JVM内存使用情况、GC情况等；
Qiueer-Template JMX Tomcat With IO-NIO.xml： tomcat监控模板，监控IO模型为NIO的tomcat实例；
Qiueer-Template JMX Tomcat With IO-BIO.xml： tomcat监控模板，监控IO模型为BIO的tomcat实例；
Qiueer-Template JMX Tomcat With IO-APR.xml： tomcat监控模板，监控IO模型为APR的tomcat实例；
jvm.py： JVM运行数据采集脚本
tomcat.py： tomcat运行数据采集脚本

使用方法：
【1】调整java进程启动参数
  I）监控tomcat实例，修改catalina.sh，开启remotejmx支持，（根据实际情况修改jmxport/ip变量）：
CATALINA_OPTS="${CATALINA_OPTS} -Dcom.sun.management.jmxremote.port=13366 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=【本机ip】"


【2】部署脚本及依赖
将cmdline-jmxclient-0.10.3.jar、jvm.py、tomcat.py拷贝到/usr/local/zabbix/lib/jvm目录

【3】修改jvm.py、tomcat.py
[root@localhost ~ 21:56:20&&51]#which java
/usr/java/jdk1.6.0_38/bin/java

在jvm.py、tomcat.py 中
找到 self._java_path = which('java') 改为 self._java_path = '/usr/java/jdk1.6.0_38/bin/java'


【4】zabbix_agent.conf配置文件中需包含如下配置，注意脚本的位置：

运行root运行zabbix
AllowRoot=1

## JVM
UserParameter=jmx.jvm.discovery, python /usr/local/zabbix/lib/jvm/jvm.py --list
UserParameter=jmx.jvm.item[*],python /usr/local/zabbix/lib/jvm/jvm.py -b $1 -k $2 -p $3
## Tomcat
UserParameter=jmx.tomcat.discovery, python /usr/local/zabbix/lib/jvm/tomcat.py --list
UserParameter=jmx.tomcat.item[*],python /usr/local/zabbix/lib/jvm/tomcat.py -b $1 -k $2 -p $3


【5】配置完成后，重启zabbix agent，例如：
service zabbix_agentd restart

【6】配置模板，在zabbix前端进行：
如果仅监控JVM，使用Qiueer-Template JMX Generic.xml模板即可；
如果监控tomcat，使用Qiueer-Template JMX Generic.xml和
Qiueer-Template JMX Tomcat With IO-NIO.xml、
Qiueer-Template JMX Tomcat With IO-BIO.xml、
Qiueer-Template JMX Tomcat With IO-APR.xml
其中一个即可，使用哪一个tomcat监控模板，根据tomcat配置的IO类型决定；

PS：
3）、4）步骤中的路劲/usr/local/zabbix/lib/jvm根据实际情况修改

【使用示例】
1）获取jmxport列表
$ python jvm.py --list
{
       "data":[
              {
                     "{#JVMPORT}":13080,
                     "{#PID}":4199,
                     "{#RUNUSER}":"qiueer"
              }
       ]
}
2）采集数据
$ python jvm.py -b 'java.lang:type=Memory' -k 'HeapMemoryUsage.committed' -p 13080
58195968
3）tomcat数据获取，同理

其他
## JVM监控，使用解析如下的命令的输出来获取jmxport
ps -ef | grep 'jmxremote.port=' | grep -v grep 2>/dev/null
## TOMCAT监控，使用解析如下的命令的输出来获取jmxport
ps -ef | grep tomcat | grep 'jmxremote.port=' | grep -v grep 2>/dev/null
